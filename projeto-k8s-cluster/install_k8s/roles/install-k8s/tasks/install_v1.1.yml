- name: Create containerd config file
  file:
    path: "/etc/modules-load.d/containerd.conf"
    state: "touch"

- name: Add conf for containerd
  blockinfile:
    path: "/etc/modules-load.d/containerd.conf"
    block: |
      overlay
      br_netfilter

- name: modprobe
  shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter

- name: Set system configurations for Kubernetes networking
  file:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    state: "touch"

- name: Add conf for containerd
  blockinfile:
    path: "/etc/sysctl.d/99-kubernetes-cri.conf"
    block: |
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1

- name: Apply new settings
  command: sudo sysctl --system

- name: install containerd
  shell: |
    sudo apt-get update && sudo apt-get install -y containerd
    sudo mkdir -p /etc/containerd
    sudo containerd config default | sudo tee /etc/containerd/config.toml
    sudo systemctl restart containerd

- name: Criando arquivo de configuracao do containerd
  copy: 
    dest: "/etc/crictl.yaml"
    content: |
        runtime-endpoint: unix:///run/containerd/containerd.sock
        image-endpoint: unix:///run/containerd/containerd.sock
        timeout: 2
        debug: false
        
- name: Habilitando e iniciando servico do containerd
  systemd: 
    name: containerd
    state: restarted
    enabled: yes
    daemon-reload: yes    

- name: disable swap
  shell: |
    sudo swapoff -a
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

- name: install and configure dependencies
  shell: |
    sudo apt-get update && sudo apt-get install -y apt-transport-https curl

- name: Adicionando as chaves da repo apt do k8s
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adicionando o repo do k8s
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present

- name: Instalando os pacotes kubeadm, kubelet e kubectl
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable service kubelet, and enable persistently
  service: 
    name: kubelet
    enabled: yes

- name: Reboot all the kubernetes nodes.
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 3600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami    
